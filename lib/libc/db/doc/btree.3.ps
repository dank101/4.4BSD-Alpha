%!PS-Adobe-
%%Creator: groff version 1.03
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.03 0
%%Pages: 2
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.03 0

/setpacking where {
	pop
	currentpacking
	true setpacking
} if

/grops 120 dict dup begin 

% The ASCII code of the space character.
/SC 32 def

/A /show load def
/B { 0 SC 3 -1 roll widthshow } bind def
/C { 0 exch ashow } bind def
/D { 0 exch 0 SC 5 2 roll awidthshow } bind def
/E { 0 rmoveto show } bind def
/F { 0 rmoveto 0 SC 3 -1 roll widthshow } bind def
/G { 0 rmoveto 0 exch ashow } bind def
/H { 0 rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/I { 0 exch rmoveto show } bind def
/J { 0 exch rmoveto 0 SC 3 -1 roll widthshow } bind def
/K { 0 exch rmoveto 0 exch ashow } bind def
/L { 0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/M { rmoveto show } bind def
/N { rmoveto 0 SC 3 -1 roll widthshow } bind def
/O { rmoveto 0 exch ashow } bind def
/P { rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/Q { moveto show } bind def 
/R { moveto 0 SC 3 -1 roll widthshow } bind def
/S { moveto 0 exch ashow } bind def
/T { moveto 0 exch 0 SC 5 2 roll awidthshow } bind def

% name size font SF -

/SF {
	findfont exch
	[ exch dup 0 exch 0 exch neg 0 0 ] makefont
	dup setfont
	[ exch /setfont cvx ] cvx bind def
} bind def

% name a c d font MF -

/MF {
	findfont
	[ 5 2 roll
	0 3 1 roll % b
	neg 0 0 ] makefont
	dup setfont
	[ exch /setfont cvx ] cvx bind def
} bind def

/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def

% BP -

/BP {
	/level0 save def
	1 setlinecap
	1 setlinejoin
	72 RES div dup scale
	LS {
		90 rotate
	} {
		0 PL translate
	} ifelse
	1 -1 scale
} bind def

/EP {
	level0 restore
	showpage
} bind def


% centerx centery radius startangle endangle DA -

/DA {
	newpath arcn stroke
} bind def

% x y SN - x' y'
% round a position to nearest (pixel + (.25,.25))

/SN {
	transform 
	.25 sub exch .25 sub exch
	round .25 add exch round .25 add exch
	itransform
} bind def
	
% endx endy startx starty DL -
% we round the endpoints of the line, so that parallel horizontal
% and vertical lines will appear even

/DL {
	SN
	moveto
	SN
	lineto stroke
} bind def

% centerx centery radius DC -

/DC {
	newpath 0 360 arc closepath
} bind def


/TM matrix def

%  width height centerx centery DE -

/DE {
	TM currentmatrix pop
	translate scale newpath 0 0 .5 0 360 arc closepath
	TM setmatrix
} bind def

% these are for splines

/RC /rcurveto load def
/RL /rlineto load def
/ST /stroke load def
/MT /moveto load def
/CL /closepath load def

% fill the last path

% amount FL -

/FL {
	currentgray exch setgray fill setgray
} bind def

% fill with the ``current color''

/BL /fill load def

/LW /setlinewidth load def
% new_font_name encoding_vector old_font_name RE -

/RE {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def

/DEFS 0 def

% hpos vpos EBEGIN -

/EBEGIN {
	moveto
	DEFS begin
} bind def

/EEND /end load def

/CNT 0 def
/level1 0 def

% llx lly newwid wid newht ht newllx newlly PBEGIN -

/PBEGIN {
	/level1 save def
	translate
	div 3 1 roll div exch scale
	neg exch neg exch translate
	% set the graphics state to default values
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {
		pop
		false setstrokeadjust
	} if
	/setoverprint where {
		pop
		false setoverprint
	} if
	newpath
	/CNT countdictstack def
	/showpage {} def
} bind def

/PEND {
	clear
	countdictstack CNT sub { end } repeat
	level1 restore
} bind def

end def

/setpacking where {
	pop
	setpacking
} if
%%EndResource
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72 def/PL
792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron/scaron/zcaron
/Ydieresis/trademark/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/space/exclam
/quotedbl/numbersign/dollar/percent/ampersand/quoteright/parenleft/parenright
/asterisk/plus/comma/hyphen/period/slash/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J
/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z
/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl/endash
/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut/dotaccent/breve
/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash/quotedblbase/OE/Lslash
/.notdef/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis
/copyright/ordfeminine/guilsinglleft/logicalnot/minus/registered/macron/degree
/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth
/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex
/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde
/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn
/ydieresis]def/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold
RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 378.84(BTREE\(3\) BTREE\(3\))72 48 R/F1 9/Times-Bold@0
SF(NAME)72 84 Q F0(btree \255 btree database access method)108 96 Q F1
(SYNOPSIS)72 112.8 Q/F2 10/Times-Bold@0 SF(#include <sys/types.h>)108 124.8 Q
(#include <db.h>)108 136.8 Q F1(DESCRIPTION)72 153.6 Q F0 .193(The routine)108
165.6 R/F3 10/Times-Italic@0 SF(dbopen)2.693 E F0 .192
(is the library interface to database \214les.)2.693 F .192
(One of the supported \214le formats is btree \214les.)5.192 F .976
(The general description of the database access methods is in)108 177.6 R F3
(dbopen)3.477 E F0 .977(\(3\), this manual page describes only).21 F
(the btree speci\214c information.)108 189.6 Q(The btree data structure is a s\
orted, balanced tree structure storing associated key/data pairs.)108 206.4 Q
.471(The btree access method speci\214c data structure provided to)108 223.2 R
F3(dbopen)2.971 E F0 .471(is de\214ned in the <db.h> include \214le as)2.971 F
(follows:)108 235.2 Q(typedef struct {)108 252 Q(u_long \215ags;)144 264 Q
(u_int cachesize;)144 276 Q(index_t psize;)144 288 Q(int lorder;)144 300 Q
(int minkeypage;)144 312 Q
(int \(*compare\)\(const DBT *key1, const DBT *key2\);)144 324 Q
(int \(*pre\214x\)\(const DBT *key1, const DBT *key2\);)144 336 Q 2.5(}B)108
348 S(TREEINFO;)121.97 348 Q(The elements of this structure are as follows:)108
364.8 Q 14.61(\215ags The)108 381.6 R(\215ag value is speci\214ed by)2.5 E F3
(or)2.5 E F0('ing any of the following values:).53 E(R_DUP)144 398.4 Q 1.263(P\
ermit duplicate keys in the tree, i.e. permit insertion if the key to be inser\
ted already)180 410.4 R 1.884(exists in the tree.)180 422.4 R 1.884
(The default behavior)6.884 F 4.384(,a)-.4 G 4.384(sd)358.308 422.4 S 1.883
(escribed in)371.582 422.4 R F3(dbopen)4.383 E F0 1.883
(\(3\), is to overwrite a).21 F .059
(matching key when inserting a new key or to fail if the R_NOOVER)180 434.4 R
.059(WRITE \215ag is speci-)-.55 F 5.905(\214ed. The)180 446.4 R 3.405
(R_DUP \215ag is overridden by the R_NOOVER)5.905 F 3.405
(WRITE \215ag, and if the)-.55 F(R_NOOVER)180 458.4 Q .719(WRITE \215ag is spe\
ci\214ed, attempts to insert duplicate keys into the tree will)-.55 F(fail.)180
470.4 Q 1.058(If the database contains duplicate keys, the order of retrieval \
of key/data pairs is unde-)180 487.2 R .787(\214ned if the)180 499.2 R F3(get)
3.287 E F0 .787(routine is used, however)3.287 F(,)-.4 E F3(seq)3.287 E F0 .788
(routine calls with the R_CURSOR \215ag set)3.287 F
(will always return the logical `)180 511.2 Q(`\214rst')-.74 E 2.5('o)-.74 G
2.5(fa)334.05 511.2 S(ny group of duplicate keys.)344.32 511.2 Q(cachesize)108
528 Q 3.04(As)144 540 S .54
(uggested maximum size \(in bytes\) of the memory cache.)158.15 540 R .54
(This value is)5.54 F F2(only)3.04 E F0(advisory)3.04 E 3.04(,a)-.65 G .54
(nd the)514.74 540 R .713
(access method will allocate more memory rather than fail.)144 552 R .713
(Since every search examines the root)5.713 F .035(page of the tree, caching t\
he most recently used pages substantially improves access time.)144 564 R .034
(In addi-)5.034 F .659(tion, physical writes are delayed as long as possible, \
so a moderate cache can reduce the number)144 576 R .567
(of I/O operations signi\214cantly)144 588 R 5.566(.O)-.65 G(bviously)280.606
588 Q 3.066(,u)-.65 G .566
(sing a cache increases \(but only increases\) the likeli-)324.972 588 R .182(\
hood of corruption or lost data if the system crashes while a tree is being mo\
di\214ed.)144 600 R(If)5.183 E F3(cachesize)2.683 E F0(is)2.683 E 2.5(0\()144
612 S(no size is speci\214ed\) a default cache is used.)154.83 612 Q 12.95
(psize Page)108 628.8 R .442
(size is the size \(in bytes\) of the pages used for nodes in the tree.)2.942 F
.442(The minimum page size is)5.442 F .442
(512 bytes and the maximum page size is 64K.)144 640.8 R(If)5.442 E F3(psize)
2.942 E F0 .442(is 0 \(no page size is speci\214ed\) a page size)2.942 F
(is chosen based on the underlying \214le system I/O block size.)144 652.8 Q
9.62(lorder The)108 669.6 R 1.586
(byte order for integers in the stored database metadata.)4.086 F 1.585
(The number should represent the)6.586 F .667
(order as an integer; for example, big endian order would be the number 4,321.)
144 681.6 R(If)5.667 E F3(lor)3.167 E(der)-.37 E F0 .667(is 0 \(no)3.167 F
(order is speci\214ed\) the current host order is used.)144 693.6 Q(1)535 768 Q
EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 378.84(BTREE\(3\) BTREE\(3\))72 48 R(minkeypage)108 84
Q 1.384(The minimum number of keys which will be stored on any single page.)144
96 R 1.384(This value is used to)6.384 F .202(determine which keys will be sto\
red on over\215ow pages, i.e. if a key or data item is longer than the)144 108
R 1.021(pagesize divided by the minkeypage value, it will be stored on over\
\215ow pages instead of in the)144 120 R(page itself.)144 132 Q(If)5 E/F1 10
/Times-Italic@0 SF(minkeypage)2.5 E F0
(is 0 \(no minimum number of keys is speci\214ed\) a value of 2 is used.)2.5 E
(compare)108 148.8 Q .726(Compare is the key comparison function.)144 160.8 R
.726(It must return an integer less than, equal to, or greater)5.726 F .875
(than zero if the \214rst key ar)144 172.8 R .875
(gument is considered to be respectively less than, equal to, or greater)-.18 F
.286(than the second key ar)144 184.8 R 2.787(gument. The)-.18 F .287
(same comparison function must be used on a given tree every)2.787 F .802
(time it is opened.)144 196.8 R(If)5.802 E F1(compar)3.301 E(e)-.37 E F0 .801
(is NULL \(no comparison function is speci\214ed\), the keys are com-)3.301 F
(pared lexically)144 208.8 Q 2.5(,w)-.65 G
(ith shorter keys considered less than longer keys.)214.72 208.8 Q 10.17
(pre\214x Pre\214x)108 225.6 R .291(is the pre\214x comparison function.)2.791
F .292(If speci\214ed, this routine must return the number of bytes)5.291 F
.908(of the second key ar)144 237.6 R .908(gument which are necessary to deter\
mine that it is greater than the \214rst key)-.18 F(ar)144 249.6 Q 3.446
(gument. If)-.18 F .946(the keys are equal, the key length should be returned.)
3.446 F .947(Note, the usefulness of this)5.946 F .535(routine is very data de\
pendent, but, in some data sets can produce signi\214cantly reduced tree sizes)
144 261.6 R .354(and search times.)144 273.6 R(If)5.354 E F1(pr)2.854 E(e\214x)
-.37 E F0 .354(is NULL \(no pre\214x function is speci\214ed\),)2.854 F/F2 10
/Times-Bold@0 SF(and)2.854 E F0 .354(no comparison function)2.854 F .177
(is speci\214ed, a default lexical comparison routine is used.)144 285.6 R(If)
5.177 E F1(pr)2.677 E(e\214x)-.37 E F0 .177(is NULL and a comparison rou-)2.677
F(tine is speci\214ed, no pre\214x comparison is done.)144 297.6 Q .743(If the\
 \214le already exists \(and the O_TRUNC \215ag is not speci\214ed\), the valu\
es speci\214ed for the parameters)108 314.4 R(\215ags, lorder and psize are ig\
nored in favor of the values used when the tree was created.)108 326.4 Q
(Forward sequential scans of a tree are from the least key to the greatest.)108
343.2 Q 1.005(Space freed up by deleting key/data pairs from the tree is never\
 reclaimed, although it is normally made)108 360 R 1.35(available for reuse.)
108 372 R 1.351(This means that the btree storage structure is grow-only)6.35 F
6.351(.T)-.65 G 1.351(he only solutions are to)441.266 372 R(avoid excessive d\
eletions, or to create a fresh tree periodically from a scan of an existing on\
e.)108 384 Q .326(Searches, insertions, and deletions in a btree will all comp\
lete in O lg base N where base is the average \214ll)108 400.8 R(factor)108
412.8 Q 5.77(.O)-.55 G .771
(ften, inserting ordered data into btrees results in a low \214ll factor)146.26
412.8 R 5.771(.T)-.55 G .771(his implementation has been)423.527 412.8 R(modi\
\214ed to make ordered insertion the best case, resulting in a much better tha\
n normal page \214ll factor)108 424.8 Q(.)-.55 E/F3 9/Times-Bold@0 SF(SEE ALSO)
72 441.6 Q F1(dbopen)108 453.6 Q F0(\(3\),).21 E F1(hash)2.5 E F0(\(3\),).23 E
F1(mpool)2.5 E F0(\(3\),).48 E F1 -.37(re)2.5 G(cno).37 E F0(\(3\)).17 E F1
(The Ubiquitous B-tr)108 465.6 Q(ee)-.37 E F0 2.5(,D).18 G(ouglas Comer)209.47
465.6 Q 2.5(,A)-.4 G(CM Comput. Surv)277.12 465.6 Q 2.5(.1)-.65 G
(1, 2 \(June 1979\), 121-138.)360.28 465.6 Q F1(The Art of Computer Pr)108
477.6 Q(ogramming V)-.37 E(ol. 3: Sorting and Sear)-1.11 E(ching)-.37 E F0 2.5
(,D).21 G(.E. Knuth, 1968, pp 471-480.)382.47 477.6 Q F3(BUGS)72 494.4 Q F0
(Only big and little endian byte order is supported.)108 506.4 Q(2)535 768 Q EP
%%Trailer
end
%%EOF
